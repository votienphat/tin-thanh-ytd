//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess.EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using EntitiesObject.Entities.UserEntities;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class UserEntities : DbContext
    {
        public UserEntities()
            : base("name=UserEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    	public UserEntities(string nameOrConnectionString) : base(nameOrConnectionString)
        {
    
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Account> Accounts { get; set; }
        public DbSet<LogCardTran> LogCardTrans { get; set; }
        public DbSet<Profile> Profiles { get; set; }
        public DbSet<Wallet> Wallets { get; set; }
        public DbSet<OfflineMessage> OfflineMessages { get; set; }
        public DbSet<PaymentConfig> PaymentConfigs { get; set; }
        public DbSet<MyConfig> MyConfigs { get; set; }
    
        public virtual int Out_Payment(Nullable<int> userID, string serial, string pinCode, Nullable<int> cardType, string iPAddress, Nullable<int> platformID, Nullable<int> partnerID, string partnerMessage, Nullable<int> cardAmount, Nullable<int> walletType, Nullable<int> result, string transID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var serialParameter = serial != null ?
                new ObjectParameter("serial", serial) :
                new ObjectParameter("serial", typeof(string));
    
            var pinCodeParameter = pinCode != null ?
                new ObjectParameter("pinCode", pinCode) :
                new ObjectParameter("pinCode", typeof(string));
    
            var cardTypeParameter = cardType.HasValue ?
                new ObjectParameter("cardType", cardType) :
                new ObjectParameter("cardType", typeof(int));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("iPAddress", iPAddress) :
                new ObjectParameter("iPAddress", typeof(string));
    
            var platformIDParameter = platformID.HasValue ?
                new ObjectParameter("platformID", platformID) :
                new ObjectParameter("platformID", typeof(int));
    
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("partnerID", partnerID) :
                new ObjectParameter("partnerID", typeof(int));
    
            var partnerMessageParameter = partnerMessage != null ?
                new ObjectParameter("partnerMessage", partnerMessage) :
                new ObjectParameter("partnerMessage", typeof(string));
    
            var cardAmountParameter = cardAmount.HasValue ?
                new ObjectParameter("cardAmount", cardAmount) :
                new ObjectParameter("cardAmount", typeof(int));
    
            var walletTypeParameter = walletType.HasValue ?
                new ObjectParameter("walletType", walletType) :
                new ObjectParameter("walletType", typeof(int));
    
            var resultParameter = result.HasValue ?
                new ObjectParameter("result", result) :
                new ObjectParameter("result", typeof(int));
    
            var transIDParameter = transID != null ?
                new ObjectParameter("transID", transID) :
                new ObjectParameter("transID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_Payment", userIDParameter, serialParameter, pinCodeParameter, cardTypeParameter, iPAddressParameter, platformIDParameter, partnerIDParameter, partnerMessageParameter, cardAmountParameter, walletTypeParameter, resultParameter, transIDParameter);
        }
    
        public virtual ObjectResult<Out_MyConfig_GetCardConfig_Result> Out_MyConfig_GetCardConfig(string key)
        {
            var keyParameter = key != null ?
                new ObjectParameter("Key", key) :
                new ObjectParameter("Key", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_MyConfig_GetCardConfig_Result>("Out_MyConfig_GetCardConfig", keyParameter);
        }
    
        public virtual ObjectResult<string> Out_LogCardTrans_Insert(Nullable<int> userID, string serial, string pinCard, Nullable<int> cardType, string iPAddress, Nullable<int> platformID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var serialParameter = serial != null ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(string));
    
            var pinCardParameter = pinCard != null ?
                new ObjectParameter("PinCard", pinCard) :
                new ObjectParameter("PinCard", typeof(string));
    
            var cardTypeParameter = cardType.HasValue ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(int));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var platformIDParameter = platformID.HasValue ?
                new ObjectParameter("PlatformID", platformID) :
                new ObjectParameter("PlatformID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Out_LogCardTrans_Insert", userIDParameter, serialParameter, pinCardParameter, cardTypeParameter, iPAddressParameter, platformIDParameter);
        }
    
        public virtual ObjectResult<Out_Account_GetByID_Result> Out_Account_GetByID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_Account_GetByID_Result>("Out_Account_GetByID", userIDParameter);
        }
    }
}
