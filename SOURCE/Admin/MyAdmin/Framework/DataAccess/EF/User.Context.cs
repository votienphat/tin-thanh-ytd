//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess.EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using EntitiesObject.Entities.UserEntities;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class UserEntities : DbContext
    {
        public UserEntities()
            : base("name=UserEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    	public UserEntities(string nameOrConnectionString) : base(nameOrConnectionString)
        {
    
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Account> Accounts { get; set; }
        public DbSet<Profile> Profiles { get; set; }
        public DbSet<PaymentConfig> PaymentConfigs { get; set; }
        public DbSet<MyConfig> MyConfigs { get; set; }
        public DbSet<LogTransactionGold> LogTransactionGolds { get; set; }
        public DbSet<ExchangeConfig> ExchangeConfigs { get; set; }
        public DbSet<Ranking> Rankings { get; set; }
        public DbSet<OfflineMessage> OfflineMessages { get; set; }
        public DbSet<RankingDetail> RankingDetails { get; set; }
        public DbSet<LogCardTran> LogCardTrans { get; set; }
        public DbSet<LogExchange> LogExchanges { get; set; }
        public DbSet<Article> Articles { get; set; }
        public DbSet<ItemGame> ItemGames { get; set; }
        public DbSet<ItemGameUser> ItemGameUsers { get; set; }
        public DbSet<Farmer> Farmers { get; set; }
        public DbSet<WalletStar> WalletStars { get; set; }
        public DbSet<Kiot> Kiots { get; set; }
        public DbSet<KiotUser> KiotUsers { get; set; }
        public DbSet<FriendRelationship> FriendRelationships { get; set; }
        public DbSet<LogCardOpenGiftBox> LogCardOpenGiftBoxes { get; set; }
        public DbSet<KiotPromotion> KiotPromotions { get; set; }
        public DbSet<Wallet> Wallets { get; set; }
        public DbSet<LogCreditTran> LogCreditTrans { get; set; }
        public DbSet<CardStock> CardStocks { get; set; }
    
        public virtual ObjectResult<Out_MyConfig_GetCardConfig_Result> Out_MyConfig_GetCardConfig(string key)
        {
            var keyParameter = key != null ?
                new ObjectParameter("Key", key) :
                new ObjectParameter("Key", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_MyConfig_GetCardConfig_Result>("Out_MyConfig_GetCardConfig", keyParameter);
        }
    
        public virtual ObjectResult<Out_Account_GetByID_Result> Out_Account_GetByID(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_Account_GetByID_Result>("Out_Account_GetByID", userIDParameter);
        }
    
        public virtual ObjectResult<Out_PaymentConfig_GetByAmount_Result> Out_PaymentConfig_GetByAmount(Nullable<decimal> amount, Nullable<int> cardType)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var cardTypeParameter = cardType.HasValue ?
                new ObjectParameter("cardType", cardType) :
                new ObjectParameter("cardType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_PaymentConfig_GetByAmount_Result>("Out_PaymentConfig_GetByAmount", amountParameter, cardTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> Out_Wallet_UpdateCoin(Nullable<int> userId, Nullable<int> walletType, Nullable<decimal> coin)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var walletTypeParameter = walletType.HasValue ?
                new ObjectParameter("walletType", walletType) :
                new ObjectParameter("walletType", typeof(int));
    
            var coinParameter = coin.HasValue ?
                new ObjectParameter("coin", coin) :
                new ObjectParameter("coin", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Out_Wallet_UpdateCoin", userIdParameter, walletTypeParameter, coinParameter);
        }
    
        public virtual ObjectResult<Out_ExchangeCoin_ToCard_Result> Out_ExchangeCoin_ToCard(Nullable<int> userId, Nullable<int> cardType, Nullable<int> paymentType, Nullable<decimal> amount, Nullable<int> walletType)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var cardTypeParameter = cardType.HasValue ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(int));
    
            var paymentTypeParameter = paymentType.HasValue ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var walletTypeParameter = walletType.HasValue ?
                new ObjectParameter("WalletType", walletType) :
                new ObjectParameter("WalletType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_ExchangeCoin_ToCard_Result>("Out_ExchangeCoin_ToCard", userIdParameter, cardTypeParameter, paymentTypeParameter, amountParameter, walletTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> Out_Account_GetCoin(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Out_Account_GetCoin", userIDParameter);
        }
    
        public virtual ObjectResult<Out_ExchangeConfig_GetByType_Result> Out_ExchangeConfig_GetByType(Nullable<int> exchangeType)
        {
            var exchangeTypeParameter = exchangeType.HasValue ?
                new ObjectParameter("ExchangeType", exchangeType) :
                new ObjectParameter("ExchangeType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_ExchangeConfig_GetByType_Result>("Out_ExchangeConfig_GetByType", exchangeTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Out_Wallet_AddOrSubtractGoldUser(Nullable<int> userId, Nullable<int> adminId, Nullable<decimal> goldTransfer, Nullable<int> reasonId, string description, Nullable<int> actionId, Nullable<bool> isMobile, Nullable<int> loginType, Nullable<int> clientTarget)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            var goldTransferParameter = goldTransfer.HasValue ?
                new ObjectParameter("GoldTransfer", goldTransfer) :
                new ObjectParameter("GoldTransfer", typeof(decimal));
    
            var reasonIdParameter = reasonId.HasValue ?
                new ObjectParameter("ReasonId", reasonId) :
                new ObjectParameter("ReasonId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var actionIdParameter = actionId.HasValue ?
                new ObjectParameter("ActionId", actionId) :
                new ObjectParameter("ActionId", typeof(int));
    
            var isMobileParameter = isMobile.HasValue ?
                new ObjectParameter("IsMobile", isMobile) :
                new ObjectParameter("IsMobile", typeof(bool));
    
            var loginTypeParameter = loginType.HasValue ?
                new ObjectParameter("LoginType", loginType) :
                new ObjectParameter("LoginType", typeof(int));
    
            var clientTargetParameter = clientTarget.HasValue ?
                new ObjectParameter("clientTarget", clientTarget) :
                new ObjectParameter("clientTarget", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Out_Wallet_AddOrSubtractGoldUser", userIdParameter, adminIdParameter, goldTransferParameter, reasonIdParameter, descriptionParameter, actionIdParameter, isMobileParameter, loginTypeParameter, clientTargetParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> Out_Wallet_DebositOrWithdrawCoffer(Nullable<int> userId, Nullable<decimal> goldTransfer, Nullable<int> actionType, string iPAddress, Nullable<int> platformID, string hardwareID, ObjectParameter result, ObjectParameter walletNow, ObjectParameter cofferNow)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var goldTransferParameter = goldTransfer.HasValue ?
                new ObjectParameter("GoldTransfer", goldTransfer) :
                new ObjectParameter("GoldTransfer", typeof(decimal));
    
            var actionTypeParameter = actionType.HasValue ?
                new ObjectParameter("ActionType", actionType) :
                new ObjectParameter("ActionType", typeof(int));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var platformIDParameter = platformID.HasValue ?
                new ObjectParameter("PlatformID", platformID) :
                new ObjectParameter("PlatformID", typeof(int));
    
            var hardwareIDParameter = hardwareID != null ?
                new ObjectParameter("HardwareID", hardwareID) :
                new ObjectParameter("HardwareID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Out_Wallet_DebositOrWithdrawCoffer", userIdParameter, goldTransferParameter, actionTypeParameter, iPAddressParameter, platformIDParameter, hardwareIDParameter, result, walletNow, cofferNow);
        }
    
        public virtual ObjectResult<Nullable<decimal>> Out_ExchangeCard_Cancel(Nullable<int> logId, Nullable<int> userId, ObjectParameter result, ObjectParameter walletNow)
        {
            var logIdParameter = logId.HasValue ?
                new ObjectParameter("LogId", logId) :
                new ObjectParameter("LogId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Out_ExchangeCard_Cancel", logIdParameter, userIdParameter, result, walletNow);
        }
    
        public virtual int Out_Account_AddAvatar(Nullable<int> userId, string emotionPath)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var emotionPathParameter = emotionPath != null ?
                new ObjectParameter("EmotionPath", emotionPath) :
                new ObjectParameter("EmotionPath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_Account_AddAvatar", userIdParameter, emotionPathParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Out_OfflineMessage_Delete(Nullable<int> userID, string listID, string separetor, ObjectParameter result)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var listIDParameter = listID != null ?
                new ObjectParameter("ListID", listID) :
                new ObjectParameter("ListID", typeof(string));
    
            var separetorParameter = separetor != null ?
                new ObjectParameter("Separetor", separetor) :
                new ObjectParameter("Separetor", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Out_OfflineMessage_Delete", userIDParameter, listIDParameter, separetorParameter, result);
        }
    
        public virtual ObjectResult<Out_OfflineMessage_Get_Result> Out_OfflineMessage_Get(Nullable<int> userId, Nullable<int> rowStart, Nullable<int> rowEnd, Nullable<int> messageType, ObjectParameter totalRow)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var rowStartParameter = rowStart.HasValue ?
                new ObjectParameter("RowStart", rowStart) :
                new ObjectParameter("RowStart", typeof(int));
    
            var rowEndParameter = rowEnd.HasValue ?
                new ObjectParameter("RowEnd", rowEnd) :
                new ObjectParameter("RowEnd", typeof(int));
    
            var messageTypeParameter = messageType.HasValue ?
                new ObjectParameter("MessageType", messageType) :
                new ObjectParameter("MessageType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_OfflineMessage_Get_Result>("Out_OfflineMessage_Get", userIdParameter, rowStartParameter, rowEndParameter, messageTypeParameter, totalRow);
        }
    
        public virtual ObjectResult<Out_OfflineMessage_GetDetails_Result> Out_OfflineMessage_GetDetails(Nullable<int> userId, Nullable<int> messageId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var messageIdParameter = messageId.HasValue ?
                new ObjectParameter("MessageId", messageId) :
                new ObjectParameter("MessageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_OfflineMessage_GetDetails_Result>("Out_OfflineMessage_GetDetails", userIdParameter, messageIdParameter);
        }
    
        public virtual ObjectResult<Out_RankingDetail_GetTopChargeCard_Result> Out_RankingDetail_GetTopChargeCard(Nullable<int> rowStart, Nullable<int> rowEnd)
        {
            var rowStartParameter = rowStart.HasValue ?
                new ObjectParameter("RowStart", rowStart) :
                new ObjectParameter("RowStart", typeof(int));
    
            var rowEndParameter = rowEnd.HasValue ?
                new ObjectParameter("RowEnd", rowEnd) :
                new ObjectParameter("RowEnd", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_RankingDetail_GetTopChargeCard_Result>("Out_RankingDetail_GetTopChargeCard", rowStartParameter, rowEndParameter);
        }
    
        public virtual ObjectResult<Out_PaymentConfig_GetRateCard_Result> Out_PaymentConfig_GetRateCard()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_PaymentConfig_GetRateCard_Result>("Out_PaymentConfig_GetRateCard");
        }
    
        public virtual ObjectResult<Nullable<int>> Out_LogCardTrans_Update(Nullable<int> userID, Nullable<int> transID, string partnerTransID, Nullable<int> result, Nullable<int> cardAmount, Nullable<int> partnerID, string partnerMessage)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("transID", transID) :
                new ObjectParameter("transID", typeof(int));
    
            var partnerTransIDParameter = partnerTransID != null ?
                new ObjectParameter("PartnerTransID", partnerTransID) :
                new ObjectParameter("PartnerTransID", typeof(string));
    
            var resultParameter = result.HasValue ?
                new ObjectParameter("Result", result) :
                new ObjectParameter("Result", typeof(int));
    
            var cardAmountParameter = cardAmount.HasValue ?
                new ObjectParameter("CardAmount", cardAmount) :
                new ObjectParameter("CardAmount", typeof(int));
    
            var partnerIDParameter = partnerID.HasValue ?
                new ObjectParameter("PartnerID", partnerID) :
                new ObjectParameter("PartnerID", typeof(int));
    
            var partnerMessageParameter = partnerMessage != null ?
                new ObjectParameter("PartnerMessage", partnerMessage) :
                new ObjectParameter("PartnerMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Out_LogCardTrans_Update", userIDParameter, transIDParameter, partnerTransIDParameter, resultParameter, cardAmountParameter, partnerIDParameter, partnerMessageParameter);
        }
    
        public virtual ObjectResult<Out_RankingDetail_GetTopExChangeCard_Result> Out_RankingDetail_GetTopExChangeCard(Nullable<int> rowStart, Nullable<int> rowEnd)
        {
            var rowStartParameter = rowStart.HasValue ?
                new ObjectParameter("RowStart", rowStart) :
                new ObjectParameter("RowStart", typeof(int));
    
            var rowEndParameter = rowEnd.HasValue ?
                new ObjectParameter("RowEnd", rowEnd) :
                new ObjectParameter("RowEnd", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_RankingDetail_GetTopExChangeCard_Result>("Out_RankingDetail_GetTopExChangeCard", rowStartParameter, rowEndParameter);
        }
    
        public virtual int Out_LogExchange_GetTotalGoldAndIsExchanged(Nullable<int> userId, Nullable<decimal> cardAmount, ObjectParameter totalAmount, ObjectParameter isExchangedThisCardAmount)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var cardAmountParameter = cardAmount.HasValue ?
                new ObjectParameter("CardAmount", cardAmount) :
                new ObjectParameter("CardAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_LogExchange_GetTotalGoldAndIsExchanged", userIdParameter, cardAmountParameter, totalAmount, isExchangedThisCardAmount);
        }
    
        public virtual ObjectResult<Out_Wallet_ExchangeCoin_ToCard_Result> Out_Wallet_ExchangeCoin_ToCard(Nullable<int> userId, Nullable<int> cardType, Nullable<int> paymentType, Nullable<decimal> amount, Nullable<int> walletType)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var cardTypeParameter = cardType.HasValue ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(int));
    
            var paymentTypeParameter = paymentType.HasValue ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var walletTypeParameter = walletType.HasValue ?
                new ObjectParameter("WalletType", walletType) :
                new ObjectParameter("WalletType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_Wallet_ExchangeCoin_ToCard_Result>("Out_Wallet_ExchangeCoin_ToCard", userIdParameter, cardTypeParameter, paymentTypeParameter, amountParameter, walletTypeParameter);
        }
    
        public virtual int Ins_Notification_AddNotification(string link, string description, Nullable<int> permissionID)
        {
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var permissionIDParameter = permissionID.HasValue ?
                new ObjectParameter("PermissionID", permissionID) :
                new ObjectParameter("PermissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Ins_Notification_AddNotification", linkParameter, descriptionParameter, permissionIDParameter);
        }
    
        public virtual ObjectResult<string> Out_Profile_GetCMND(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Out_Profile_GetCMND", userIdParameter);
        }
    
        public virtual ObjectResult<string> Out_Profile_GetPhoneNumber(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Out_Profile_GetPhoneNumber", userIdParameter);
        }
    
        public virtual int Out_Profile_UpdateCMND(Nullable<int> userId, string cMND)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var cMNDParameter = cMND != null ?
                new ObjectParameter("CMND", cMND) :
                new ObjectParameter("CMND", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_Profile_UpdateCMND", userIdParameter, cMNDParameter);
        }
    
        public virtual int Out_Profile_UpdatePhoneNumber(Nullable<int> userId, string phone)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_Profile_UpdatePhoneNumber", userIdParameter, phoneParameter);
        }
    
        public virtual ObjectResult<string> Out_Account_GetLinkAvatar(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Out_Account_GetLinkAvatar", userIdParameter);
        }
    
        public virtual ObjectResult<Out_Article_GetDisplayOnGameById_Result> Out_Article_GetDisplayOnGameById(Nullable<int> articleID)
        {
            var articleIDParameter = articleID.HasValue ?
                new ObjectParameter("ArticleID", articleID) :
                new ObjectParameter("ArticleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_Article_GetDisplayOnGameById_Result>("Out_Article_GetDisplayOnGameById", articleIDParameter);
        }
    
        public virtual int Out_OfflineMessage_Send(Nullable<int> senderId, Nullable<int> receiverId, string messageContent, Nullable<int> messageType, Nullable<int> status, string ipAddress, Nullable<int> platformId, string hardwareId, Nullable<bool> isSystem, Nullable<int> parentId)
        {
            var senderIdParameter = senderId.HasValue ?
                new ObjectParameter("SenderId", senderId) :
                new ObjectParameter("SenderId", typeof(int));
    
            var receiverIdParameter = receiverId.HasValue ?
                new ObjectParameter("ReceiverId", receiverId) :
                new ObjectParameter("ReceiverId", typeof(int));
    
            var messageContentParameter = messageContent != null ?
                new ObjectParameter("MessageContent", messageContent) :
                new ObjectParameter("MessageContent", typeof(string));
    
            var messageTypeParameter = messageType.HasValue ?
                new ObjectParameter("MessageType", messageType) :
                new ObjectParameter("MessageType", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            var platformIdParameter = platformId.HasValue ?
                new ObjectParameter("PlatformId", platformId) :
                new ObjectParameter("PlatformId", typeof(int));
    
            var hardwareIdParameter = hardwareId != null ?
                new ObjectParameter("HardwareId", hardwareId) :
                new ObjectParameter("HardwareId", typeof(string));
    
            var isSystemParameter = isSystem.HasValue ?
                new ObjectParameter("IsSystem", isSystem) :
                new ObjectParameter("IsSystem", typeof(bool));
    
            var parentIdParameter = parentId.HasValue ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_OfflineMessage_Send", senderIdParameter, receiverIdParameter, messageContentParameter, messageTypeParameter, statusParameter, ipAddressParameter, platformIdParameter, hardwareIdParameter, isSystemParameter, parentIdParameter);
        }
    
        public virtual ObjectResult<Out_ItemGameUser_GetList_Result> Out_ItemGameUser_GetList(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_ItemGameUser_GetList_Result>("Out_ItemGameUser_GetList", userIdParameter);
        }
    
        public virtual ObjectResult<Out_ItemGame_GetItemGameList_Result> Out_ItemGame_GetItemGameList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_ItemGame_GetItemGameList_Result>("Out_ItemGame_GetItemGameList");
        }
    
        public virtual ObjectResult<Out_Event_GetTopLevel_Result> Out_Event_GetTopLevel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_Event_GetTopLevel_Result>("Out_Event_GetTopLevel");
        }
    
        public virtual ObjectResult<Out_Article_GetDisplayOnGame_Result> Out_Article_GetDisplayOnGame(Nullable<int> top)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_Article_GetDisplayOnGame_Result>("Out_Article_GetDisplayOnGame", topParameter);
        }
    
        public virtual int Ins_FriendRelationship_GetTotalFriend(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Ins_FriendRelationship_GetTotalFriend", userIDParameter);
        }
    
        public virtual int Out_FriendRelationship_SaveInvite(Nullable<int> userID, Nullable<int> userFriendID, string listOpenProviderID, string description, string delimiter, Nullable<int> relationship)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userFriendIDParameter = userFriendID.HasValue ?
                new ObjectParameter("UserFriendID", userFriendID) :
                new ObjectParameter("UserFriendID", typeof(int));
    
            var listOpenProviderIDParameter = listOpenProviderID != null ?
                new ObjectParameter("ListOpenProviderID", listOpenProviderID) :
                new ObjectParameter("ListOpenProviderID", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            var relationshipParameter = relationship.HasValue ?
                new ObjectParameter("Relationship", relationship) :
                new ObjectParameter("Relationship", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_FriendRelationship_SaveInvite", userIDParameter, userFriendIDParameter, listOpenProviderIDParameter, descriptionParameter, delimiterParameter, relationshipParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Out_FriendRelationship_GetTotalFriend(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Out_FriendRelationship_GetTotalFriend", userIDParameter);
        }
    
        public virtual ObjectResult<Out_Account_GetUsersOnline_Result> Out_Account_GetUsersOnline(Nullable<int> position, Nullable<int> pageSize)
        {
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_Account_GetUsersOnline_Result>("Out_Account_GetUsersOnline", positionParameter, pageSizeParameter);
        }
    
        public virtual int Out_FriendRelationship_MakeFriend(Nullable<int> userFriendID)
        {
            var userFriendIDParameter = userFriendID.HasValue ?
                new ObjectParameter("UserFriendID", userFriendID) :
                new ObjectParameter("UserFriendID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_FriendRelationship_MakeFriend", userFriendIDParameter);
        }
    
        public virtual int Out_FriendRelationship_SaveInviteFriendRegisted(Nullable<int> userID, Nullable<int> userFriendID, string listOpenProviderID, string description, string delimiter, Nullable<int> relationship)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userFriendIDParameter = userFriendID.HasValue ?
                new ObjectParameter("UserFriendID", userFriendID) :
                new ObjectParameter("UserFriendID", typeof(int));
    
            var listOpenProviderIDParameter = listOpenProviderID != null ?
                new ObjectParameter("ListOpenProviderID", listOpenProviderID) :
                new ObjectParameter("ListOpenProviderID", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            var relationshipParameter = relationship.HasValue ?
                new ObjectParameter("Relationship", relationship) :
                new ObjectParameter("Relationship", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_FriendRelationship_SaveInviteFriendRegisted", userIDParameter, userFriendIDParameter, listOpenProviderIDParameter, descriptionParameter, delimiterParameter, relationshipParameter);
        }
    
        public virtual int Out_FriendRelationship_SaveInviteExistsOpenProviderId(Nullable<int> userID, Nullable<int> userFriendID, string listOpenProviderID, string description, string delimiter, Nullable<int> relationship)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userFriendIDParameter = userFriendID.HasValue ?
                new ObjectParameter("UserFriendID", userFriendID) :
                new ObjectParameter("UserFriendID", typeof(int));
    
            var listOpenProviderIDParameter = listOpenProviderID != null ?
                new ObjectParameter("ListOpenProviderID", listOpenProviderID) :
                new ObjectParameter("ListOpenProviderID", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            var relationshipParameter = relationship.HasValue ?
                new ObjectParameter("Relationship", relationship) :
                new ObjectParameter("Relationship", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_FriendRelationship_SaveInviteExistsOpenProviderId", userIDParameter, userFriendIDParameter, listOpenProviderIDParameter, descriptionParameter, delimiterParameter, relationshipParameter);
        }
    
        public virtual int Out_Game_CheckIsPlayGame(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_Game_CheckIsPlayGame", userIdParameter);
        }
    
        public virtual ObjectResult<Out_Wallet_ExchangeCheckEnoughGold_Result> Out_Wallet_ExchangeCheckEnoughGold(Nullable<int> userId, Nullable<int> cardType, Nullable<decimal> cardAmount)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var cardTypeParameter = cardType.HasValue ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(int));
    
            var cardAmountParameter = cardAmount.HasValue ?
                new ObjectParameter("CardAmount", cardAmount) :
                new ObjectParameter("CardAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_Wallet_ExchangeCheckEnoughGold_Result>("Out_Wallet_ExchangeCheckEnoughGold", userIdParameter, cardTypeParameter, cardAmountParameter);
        }
    
        public virtual ObjectResult<Out_Wallet_SubtractGoldExchangeCard_Result> Out_Wallet_SubtractGoldExchangeCard(Nullable<int> userId, Nullable<decimal> goldTransfer)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var goldTransferParameter = goldTransfer.HasValue ?
                new ObjectParameter("GoldTransfer", goldTransfer) :
                new ObjectParameter("GoldTransfer", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_Wallet_SubtractGoldExchangeCard_Result>("Out_Wallet_SubtractGoldExchangeCard", userIdParameter, goldTransferParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> Out_Farmer_CheckIsFarmer(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("Out_Farmer_CheckIsFarmer", userIdParameter);
        }
    
        public virtual ObjectResult<Out_FriendRelationship_GetListFriend_Result> Out_FriendRelationship_GetListFriend(Nullable<int> position, Nullable<int> pageSize, Nullable<int> userID)
        {
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_FriendRelationship_GetListFriend_Result>("Out_FriendRelationship_GetListFriend", positionParameter, pageSizeParameter, userIDParameter);
        }
    
        public virtual int Out_FriendRelationship_RemoveFriend(Nullable<int> userId, Nullable<int> friendId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var friendIdParameter = friendId.HasValue ?
                new ObjectParameter("friendId", friendId) :
                new ObjectParameter("friendId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_FriendRelationship_RemoveFriend", userIdParameter, friendIdParameter);
        }
    
        public virtual ObjectResult<Out_FriendRelationship_GetFriendInfo_Result> Out_FriendRelationship_GetFriendInfo(Nullable<int> friendId)
        {
            var friendIdParameter = friendId.HasValue ?
                new ObjectParameter("friendId", friendId) :
                new ObjectParameter("friendId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_FriendRelationship_GetFriendInfo_Result>("Out_FriendRelationship_GetFriendInfo", friendIdParameter);
        }
    
        public virtual ObjectResult<string> Ins_Account_GetNameByUserId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Ins_Account_GetNameByUserId", userIdParameter);
        }
    
        public virtual int Out_Wallet_AddOrSubtractStar(Nullable<int> userID, Nullable<int> matchID, Nullable<int> reasonId, Nullable<decimal> goldTransfer)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var matchIDParameter = matchID.HasValue ?
                new ObjectParameter("MatchID", matchID) :
                new ObjectParameter("MatchID", typeof(int));
    
            var reasonIdParameter = reasonId.HasValue ?
                new ObjectParameter("ReasonId", reasonId) :
                new ObjectParameter("ReasonId", typeof(int));
    
            var goldTransferParameter = goldTransfer.HasValue ?
                new ObjectParameter("GoldTransfer", goldTransfer) :
                new ObjectParameter("GoldTransfer", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_Wallet_AddOrSubtractStar", userIDParameter, matchIDParameter, reasonIdParameter, goldTransferParameter);
        }
    
        public virtual ObjectResult<Out_WalletStar_ExchangeCheckEnoughGold_Result> Out_WalletStar_ExchangeCheckEnoughGold(Nullable<int> userId, Nullable<int> cardType, Nullable<decimal> cardAmount)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var cardTypeParameter = cardType.HasValue ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(int));
    
            var cardAmountParameter = cardAmount.HasValue ?
                new ObjectParameter("CardAmount", cardAmount) :
                new ObjectParameter("CardAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_WalletStar_ExchangeCheckEnoughGold_Result>("Out_WalletStar_ExchangeCheckEnoughGold", userIdParameter, cardTypeParameter, cardAmountParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Out_WalletStar_UpdateGold(Nullable<int> userId, Nullable<decimal> goldTransfer, Nullable<int> reasonCoinId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var goldTransferParameter = goldTransfer.HasValue ?
                new ObjectParameter("GoldTransfer", goldTransfer) :
                new ObjectParameter("GoldTransfer", typeof(decimal));
    
            var reasonCoinIdParameter = reasonCoinId.HasValue ?
                new ObjectParameter("ReasonCoinId", reasonCoinId) :
                new ObjectParameter("ReasonCoinId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Out_WalletStar_UpdateGold", userIdParameter, goldTransferParameter, reasonCoinIdParameter);
        }
    
        public virtual ObjectResult<Out_Article_SearchByCate_Result> Out_Article_SearchByCate(Nullable<int> cateId, Nullable<int> startIndex, Nullable<int> pageLength, ObjectParameter totalRow)
        {
            var cateIdParameter = cateId.HasValue ?
                new ObjectParameter("CateId", cateId) :
                new ObjectParameter("CateId", typeof(int));
    
            var startIndexParameter = startIndex.HasValue ?
                new ObjectParameter("StartIndex", startIndex) :
                new ObjectParameter("StartIndex", typeof(int));
    
            var pageLengthParameter = pageLength.HasValue ?
                new ObjectParameter("PageLength", pageLength) :
                new ObjectParameter("PageLength", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_Article_SearchByCate_Result>("Out_Article_SearchByCate", cateIdParameter, startIndexParameter, pageLengthParameter, totalRow);
        }
    
        public virtual int Out_FriendRelationShip_AutoMakeFriend(Nullable<int> userId, string listOpenUserId, string delimiter)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var listOpenUserIdParameter = listOpenUserId != null ?
                new ObjectParameter("ListOpenUserId", listOpenUserId) :
                new ObjectParameter("ListOpenUserId", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_FriendRelationShip_AutoMakeFriend", userIdParameter, listOpenUserIdParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<Out_Article_GetArticleDetailsForClient_Result> Out_Article_GetArticleDetailsForClient(string textID)
        {
            var textIDParameter = textID != null ?
                new ObjectParameter("TextID", textID) :
                new ObjectParameter("TextID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_Article_GetArticleDetailsForClient_Result>("Out_Article_GetArticleDetailsForClient", textIDParameter);
        }
    
        public virtual ObjectResult<Ins_ApprovaExchangeCard_GetDataUserExchange_Result> Ins_ApprovaExchangeCard_GetDataUserExchange(string keyWord, Nullable<int> staus, Nullable<int> cardType, Nullable<decimal> cardAmount, Nullable<System.DateTime> dateBegin, Nullable<System.DateTime> dateEnd, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<int> orderBy, Nullable<int> orderDirection, ObjectParameter totalRow, ObjectParameter totalGoldExchange)
        {
            var keyWordParameter = keyWord != null ?
                new ObjectParameter("keyWord", keyWord) :
                new ObjectParameter("keyWord", typeof(string));
    
            var stausParameter = staus.HasValue ?
                new ObjectParameter("staus", staus) :
                new ObjectParameter("staus", typeof(int));
    
            var cardTypeParameter = cardType.HasValue ?
                new ObjectParameter("cardType", cardType) :
                new ObjectParameter("cardType", typeof(int));
    
            var cardAmountParameter = cardAmount.HasValue ?
                new ObjectParameter("cardAmount", cardAmount) :
                new ObjectParameter("cardAmount", typeof(decimal));
    
            var dateBeginParameter = dateBegin.HasValue ?
                new ObjectParameter("dateBegin", dateBegin) :
                new ObjectParameter("dateBegin", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("dateEnd", dateEnd) :
                new ObjectParameter("dateEnd", typeof(System.DateTime));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("pageNumber", pageNumber) :
                new ObjectParameter("pageNumber", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var orderByParameter = orderBy.HasValue ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(int));
    
            var orderDirectionParameter = orderDirection.HasValue ?
                new ObjectParameter("OrderDirection", orderDirection) :
                new ObjectParameter("OrderDirection", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Ins_ApprovaExchangeCard_GetDataUserExchange_Result>("Ins_ApprovaExchangeCard_GetDataUserExchange", keyWordParameter, stausParameter, cardTypeParameter, cardAmountParameter, dateBeginParameter, dateEndParameter, pageNumberParameter, pageSizeParameter, orderByParameter, orderDirectionParameter, totalRow, totalGoldExchange);
        }
    
        public virtual int Out_Kiot_SaveItemGameUser(Nullable<int> userID, Nullable<int> kiotID, Nullable<int> itemID, Nullable<int> quantity, Nullable<decimal> amount, Nullable<decimal> pricePromotion, Nullable<int> reasonID, ObjectParameter result)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var kiotIDParameter = kiotID.HasValue ?
                new ObjectParameter("KiotID", kiotID) :
                new ObjectParameter("KiotID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var pricePromotionParameter = pricePromotion.HasValue ?
                new ObjectParameter("PricePromotion", pricePromotion) :
                new ObjectParameter("PricePromotion", typeof(decimal));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_Kiot_SaveItemGameUser", userIDParameter, kiotIDParameter, itemIDParameter, quantityParameter, amountParameter, pricePromotionParameter, reasonIDParameter, result);
        }
    
        public virtual int Out_Kiot_RemoveItemGameUser(Nullable<int> userID, Nullable<int> kiotID, Nullable<int> itemID, Nullable<int> reasonID, ObjectParameter result)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var kiotIDParameter = kiotID.HasValue ?
                new ObjectParameter("KiotID", kiotID) :
                new ObjectParameter("KiotID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_Kiot_RemoveItemGameUser", userIDParameter, kiotIDParameter, itemIDParameter, reasonIDParameter, result);
        }
    
        public virtual int Out_Kiot_UpdatePromotion(Nullable<int> userID, Nullable<int> kiotID, Nullable<int> itemID, Nullable<int> reasonID, ObjectParameter result)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var kiotIDParameter = kiotID.HasValue ?
                new ObjectParameter("KiotID", kiotID) :
                new ObjectParameter("KiotID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var reasonIDParameter = reasonID.HasValue ?
                new ObjectParameter("ReasonID", reasonID) :
                new ObjectParameter("ReasonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_Kiot_UpdatePromotion", userIDParameter, kiotIDParameter, itemIDParameter, reasonIDParameter, result);
        }
    
        public virtual int Out_FriendRelationship_MakeFriend_V2(Nullable<int> userFriendID, ObjectParameter result)
        {
            var userFriendIDParameter = userFriendID.HasValue ?
                new ObjectParameter("UserFriendID", userFriendID) :
                new ObjectParameter("UserFriendID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_FriendRelationship_MakeFriend_V2", userFriendIDParameter, result);
        }
    
        public virtual ObjectResult<Out_LogExchange_GetTotalGoldAndIsExchanged_v2_Result> Out_LogExchange_GetTotalGoldAndIsExchanged_v2(Nullable<int> userId, Nullable<decimal> cardAmount)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var cardAmountParameter = cardAmount.HasValue ?
                new ObjectParameter("CardAmount", cardAmount) :
                new ObjectParameter("CardAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_LogExchange_GetTotalGoldAndIsExchanged_v2_Result>("Out_LogExchange_GetTotalGoldAndIsExchanged_v2", userIdParameter, cardAmountParameter);
        }
    
        public virtual ObjectResult<Out_ItemGame_ProcessOpenGiftBoxTypeCard_Result> Out_ItemGame_ProcessOpenGiftBoxTypeCard(Nullable<int> userID, Nullable<double> param1, Nullable<double> param2, Nullable<long> x)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(double));
    
            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(double));
    
            var xParameter = x.HasValue ?
                new ObjectParameter("x", x) :
                new ObjectParameter("x", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_ItemGame_ProcessOpenGiftBoxTypeCard_Result>("Out_ItemGame_ProcessOpenGiftBoxTypeCard", userIDParameter, param1Parameter, param2Parameter, xParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Out_LogCardOpenGiftBox_Insert(Nullable<int> userID, Nullable<int> transID, Nullable<int> itemGameUserId, Nullable<int> cardType, Nullable<int> cardAmount, Nullable<System.DateTime> transDate, Nullable<int> result, string partnerMessage)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var transIDParameter = transID.HasValue ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(int));
    
            var itemGameUserIdParameter = itemGameUserId.HasValue ?
                new ObjectParameter("ItemGameUserId", itemGameUserId) :
                new ObjectParameter("ItemGameUserId", typeof(int));
    
            var cardTypeParameter = cardType.HasValue ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(int));
    
            var cardAmountParameter = cardAmount.HasValue ?
                new ObjectParameter("CardAmount", cardAmount) :
                new ObjectParameter("CardAmount", typeof(int));
    
            var transDateParameter = transDate.HasValue ?
                new ObjectParameter("TransDate", transDate) :
                new ObjectParameter("TransDate", typeof(System.DateTime));
    
            var resultParameter = result.HasValue ?
                new ObjectParameter("Result", result) :
                new ObjectParameter("Result", typeof(int));
    
            var partnerMessageParameter = partnerMessage != null ?
                new ObjectParameter("PartnerMessage", partnerMessage) :
                new ObjectParameter("PartnerMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Out_LogCardOpenGiftBox_Insert", userIDParameter, transIDParameter, itemGameUserIdParameter, cardTypeParameter, cardAmountParameter, transDateParameter, resultParameter, partnerMessageParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Out_FriendRelationship_CheckIsFriend(Nullable<int> userId, Nullable<int> userFriendId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var userFriendIdParameter = userFriendId.HasValue ?
                new ObjectParameter("UserFriendId", userFriendId) :
                new ObjectParameter("UserFriendId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Out_FriendRelationship_CheckIsFriend", userIdParameter, userFriendIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Ins_Game_KickOrUpdateGold(Nullable<int> userId, Nullable<int> wsPacket)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var wsPacketParameter = wsPacket.HasValue ?
                new ObjectParameter("WsPacket", wsPacket) :
                new ObjectParameter("WsPacket", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Ins_Game_KickOrUpdateGold", userIdParameter, wsPacketParameter);
        }
    
        public virtual ObjectResult<Out_Kiot_GetItemSold_Result> Out_Kiot_GetItemSold(Nullable<int> userID, Nullable<int> itemID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_Kiot_GetItemSold_Result>("Out_Kiot_GetItemSold", userIDParameter, itemIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Out_Wallet_GiftCoinFriend(Nullable<int> userId, Nullable<int> friendId, Nullable<decimal> coinValue, Nullable<int> amountPersion, ObjectParameter dateCreate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var friendIdParameter = friendId.HasValue ?
                new ObjectParameter("FriendId", friendId) :
                new ObjectParameter("FriendId", typeof(int));
    
            var coinValueParameter = coinValue.HasValue ?
                new ObjectParameter("CoinValue", coinValue) :
                new ObjectParameter("CoinValue", typeof(decimal));
    
            var amountPersionParameter = amountPersion.HasValue ?
                new ObjectParameter("AmountPersion", amountPersion) :
                new ObjectParameter("AmountPersion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Out_Wallet_GiftCoinFriend", userIdParameter, friendIdParameter, coinValueParameter, amountPersionParameter, dateCreate);
        }
    
        public virtual ObjectResult<Nullable<int>> Out_FriendRelationship_GiftGoldForFriend(Nullable<int> userId, Nullable<int> userFriendId, Nullable<decimal> goldGift, Nullable<int> times, Nullable<int> reasonIdSend, Nullable<int> reasonIdReceive)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var userFriendIdParameter = userFriendId.HasValue ?
                new ObjectParameter("userFriendId", userFriendId) :
                new ObjectParameter("userFriendId", typeof(int));
    
            var goldGiftParameter = goldGift.HasValue ?
                new ObjectParameter("goldGift", goldGift) :
                new ObjectParameter("goldGift", typeof(decimal));
    
            var timesParameter = times.HasValue ?
                new ObjectParameter("times", times) :
                new ObjectParameter("times", typeof(int));
    
            var reasonIdSendParameter = reasonIdSend.HasValue ?
                new ObjectParameter("reasonIdSend", reasonIdSend) :
                new ObjectParameter("reasonIdSend", typeof(int));
    
            var reasonIdReceiveParameter = reasonIdReceive.HasValue ?
                new ObjectParameter("reasonIdReceive", reasonIdReceive) :
                new ObjectParameter("reasonIdReceive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Out_FriendRelationship_GiftGoldForFriend", userIdParameter, userFriendIdParameter, goldGiftParameter, timesParameter, reasonIdSendParameter, reasonIdReceiveParameter);
        }
    
        public virtual ObjectResult<Out_ItemGame_ProcessOpenGiftBox_Result> Out_ItemGame_ProcessOpenGiftBox(Nullable<int> userID, Nullable<double> exchange1, Nullable<double> exchange2, Nullable<long> doanhThu)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var exchange1Parameter = exchange1.HasValue ?
                new ObjectParameter("exchange1", exchange1) :
                new ObjectParameter("exchange1", typeof(double));
    
            var exchange2Parameter = exchange2.HasValue ?
                new ObjectParameter("exchange2", exchange2) :
                new ObjectParameter("exchange2", typeof(double));
    
            var doanhThuParameter = doanhThu.HasValue ?
                new ObjectParameter("doanhThu", doanhThu) :
                new ObjectParameter("doanhThu", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_ItemGame_ProcessOpenGiftBox_Result>("Out_ItemGame_ProcessOpenGiftBox", userIDParameter, exchange1Parameter, exchange2Parameter, doanhThuParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Out_Kiot_BuyKiot(Nullable<int> userID, Nullable<int> kiotID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var kiotIDParameter = kiotID.HasValue ?
                new ObjectParameter("KiotID", kiotID) :
                new ObjectParameter("KiotID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Out_Kiot_BuyKiot", userIDParameter, kiotIDParameter);
        }
    
        public virtual ObjectResult<Out_PaymentConfig_GetRateGoogleIAP_Result> Out_PaymentConfig_GetRateGoogleIAP(Nullable<int> paymentType)
        {
            var paymentTypeParameter = paymentType.HasValue ?
                new ObjectParameter("paymentType", paymentType) :
                new ObjectParameter("paymentType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_PaymentConfig_GetRateGoogleIAP_Result>("Out_PaymentConfig_GetRateGoogleIAP", paymentTypeParameter);
        }
    
        public virtual ObjectResult<Out_Kiot_GetAllKiot_Result> Out_Kiot_GetAllKiot()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_Kiot_GetAllKiot_Result>("Out_Kiot_GetAllKiot");
        }
    
        public virtual ObjectResult<Nullable<bool>> Out_Profile_CheckIsUpdatePhoneNumber(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("Out_Profile_CheckIsUpdatePhoneNumber", userIdParameter);
        }
    
        public virtual ObjectResult<Out_Call_DBGame_GetServer_Result> Out_Call_DBGame_GetServer(Nullable<bool> flatformAND, Nullable<bool> flatformIOS)
        {
            var flatformANDParameter = flatformAND.HasValue ?
                new ObjectParameter("flatformAND", flatformAND) :
                new ObjectParameter("flatformAND", typeof(bool));
    
            var flatformIOSParameter = flatformIOS.HasValue ?
                new ObjectParameter("flatformIOS", flatformIOS) :
                new ObjectParameter("flatformIOS", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_Call_DBGame_GetServer_Result>("Out_Call_DBGame_GetServer", flatformANDParameter, flatformIOSParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Out_ATPPlayerRecord_GetTimePlayToday(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Out_ATPPlayerRecord_GetTimePlayToday", userIdParameter);
        }
    
        public virtual ObjectResult<Out_Kiot_GetAllItemUser_Result> Out_Kiot_GetAllItemUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_Kiot_GetAllItemUser_Result>("Out_Kiot_GetAllItemUser", userIDParameter);
        }
    
        public virtual ObjectResult<Out_Kiot_GetAllKiot_V3_Result> Out_Kiot_GetAllKiot_V3(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_Kiot_GetAllKiot_V3_Result>("Out_Kiot_GetAllKiot_V3", userIdParameter);
        }
    
        public virtual int Out_LogCreditTrans_updateData(Nullable<int> id, Nullable<int> status, string token, string description, Nullable<decimal> amount, Nullable<decimal> currentCoin, Nullable<decimal> coinTrans)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var tokenParameter = token != null ?
                new ObjectParameter("token", token) :
                new ObjectParameter("token", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var currentCoinParameter = currentCoin.HasValue ?
                new ObjectParameter("CurrentCoin", currentCoin) :
                new ObjectParameter("CurrentCoin", typeof(decimal));
    
            var coinTransParameter = coinTrans.HasValue ?
                new ObjectParameter("coinTrans", coinTrans) :
                new ObjectParameter("coinTrans", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_LogCreditTrans_updateData", idParameter, statusParameter, tokenParameter, descriptionParameter, amountParameter, currentCoinParameter, coinTransParameter);
        }
    
        public virtual ObjectResult<Out_Account_GetUsersOnline_V2_Result> Out_Account_GetUsersOnline_V2(Nullable<int> position, Nullable<int> pageSize, Nullable<int> userId)
        {
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_Account_GetUsersOnline_V2_Result>("Out_Account_GetUsersOnline_V2", positionParameter, pageSizeParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Out_Kiot_GetKiotUser_Result> Out_Kiot_GetKiotUser(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_Kiot_GetKiotUser_Result>("Out_Kiot_GetKiotUser", userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Ins_CardStock_CheckExists(Nullable<int> cardType, Nullable<int> amount)
        {
            var cardTypeParameter = cardType.HasValue ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Ins_CardStock_CheckExists", cardTypeParameter, amountParameter);
        }
    
        public virtual int Ins_CardStock_LogExport_Add_V2(string transExportId, Nullable<int> cardType, Nullable<int> cardAmount, string cardSerial, string cardPin, Nullable<int> quantity, string description, string message, Nullable<int> status, Nullable<int> userId, Nullable<int> adminId, string clientTarget, string clientIp, string clientAgent, Nullable<int> reasonId, string reasonName, string cardTypeName)
        {
            var transExportIdParameter = transExportId != null ?
                new ObjectParameter("TransExportId", transExportId) :
                new ObjectParameter("TransExportId", typeof(string));
    
            var cardTypeParameter = cardType.HasValue ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(int));
    
            var cardAmountParameter = cardAmount.HasValue ?
                new ObjectParameter("CardAmount", cardAmount) :
                new ObjectParameter("CardAmount", typeof(int));
    
            var cardSerialParameter = cardSerial != null ?
                new ObjectParameter("CardSerial", cardSerial) :
                new ObjectParameter("CardSerial", typeof(string));
    
            var cardPinParameter = cardPin != null ?
                new ObjectParameter("CardPin", cardPin) :
                new ObjectParameter("CardPin", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("AdminId", adminId) :
                new ObjectParameter("AdminId", typeof(int));
    
            var clientTargetParameter = clientTarget != null ?
                new ObjectParameter("ClientTarget", clientTarget) :
                new ObjectParameter("ClientTarget", typeof(string));
    
            var clientIpParameter = clientIp != null ?
                new ObjectParameter("ClientIp", clientIp) :
                new ObjectParameter("ClientIp", typeof(string));
    
            var clientAgentParameter = clientAgent != null ?
                new ObjectParameter("ClientAgent", clientAgent) :
                new ObjectParameter("ClientAgent", typeof(string));
    
            var reasonIdParameter = reasonId.HasValue ?
                new ObjectParameter("ReasonId", reasonId) :
                new ObjectParameter("ReasonId", typeof(int));
    
            var reasonNameParameter = reasonName != null ?
                new ObjectParameter("ReasonName", reasonName) :
                new ObjectParameter("ReasonName", typeof(string));
    
            var cardTypeNameParameter = cardTypeName != null ?
                new ObjectParameter("CardTypeName", cardTypeName) :
                new ObjectParameter("CardTypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Ins_CardStock_LogExport_Add_V2", transExportIdParameter, cardTypeParameter, cardAmountParameter, cardSerialParameter, cardPinParameter, quantityParameter, descriptionParameter, messageParameter, statusParameter, userIdParameter, adminIdParameter, clientTargetParameter, clientIpParameter, clientAgentParameter, reasonIdParameter, reasonNameParameter, cardTypeNameParameter);
        }
    
        public virtual ObjectResult<Out_Kiot_BuyItem_Result> Out_Kiot_BuyItem(Nullable<int> userID, Nullable<int> salerID, Nullable<int> kiotID, Nullable<int> itemID, Nullable<double> taxValue)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var salerIDParameter = salerID.HasValue ?
                new ObjectParameter("SalerID", salerID) :
                new ObjectParameter("SalerID", typeof(int));
    
            var kiotIDParameter = kiotID.HasValue ?
                new ObjectParameter("KiotID", kiotID) :
                new ObjectParameter("KiotID", typeof(int));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var taxValueParameter = taxValue.HasValue ?
                new ObjectParameter("TaxValue", taxValue) :
                new ObjectParameter("TaxValue", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_Kiot_BuyItem_Result>("Out_Kiot_BuyItem", userIDParameter, salerIDParameter, kiotIDParameter, itemIDParameter, taxValueParameter);
        }
    
        public virtual ObjectResult<Out_Kiot_GetRandomItemOfFriend_Result> Out_Kiot_GetRandomItemOfFriend(Nullable<int> userID, Nullable<int> topHasPromotion, Nullable<int> topNoPromotion, string notInKiotUserID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var topHasPromotionParameter = topHasPromotion.HasValue ?
                new ObjectParameter("TopHasPromotion", topHasPromotion) :
                new ObjectParameter("TopHasPromotion", typeof(int));
    
            var topNoPromotionParameter = topNoPromotion.HasValue ?
                new ObjectParameter("TopNoPromotion", topNoPromotion) :
                new ObjectParameter("TopNoPromotion", typeof(int));
    
            var notInKiotUserIDParameter = notInKiotUserID != null ?
                new ObjectParameter("NotInKiotUserID", notInKiotUserID) :
                new ObjectParameter("NotInKiotUserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_Kiot_GetRandomItemOfFriend_Result>("Out_Kiot_GetRandomItemOfFriend", userIDParameter, topHasPromotionParameter, topNoPromotionParameter, notInKiotUserIDParameter);
        }
    
        public virtual ObjectResult<Out_ItemGame_ProcessOpenGiftBoxTypeCard_V2_Result> Out_ItemGame_ProcessOpenGiftBoxTypeCard_V2(Nullable<int> userID, Nullable<double> param1, Nullable<double> param2, Nullable<long> x)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var param1Parameter = param1.HasValue ?
                new ObjectParameter("param1", param1) :
                new ObjectParameter("param1", typeof(double));
    
            var param2Parameter = param2.HasValue ?
                new ObjectParameter("param2", param2) :
                new ObjectParameter("param2", typeof(double));
    
            var xParameter = x.HasValue ?
                new ObjectParameter("x", x) :
                new ObjectParameter("x", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_ItemGame_ProcessOpenGiftBoxTypeCard_V2_Result>("Out_ItemGame_ProcessOpenGiftBoxTypeCard_V2", userIDParameter, param1Parameter, param2Parameter, xParameter);
        }
    
        public virtual int Api_A_Gold_UpdateForUser(Nullable<int> userID, Nullable<int> type, Nullable<long> gold)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var goldParameter = gold.HasValue ?
                new ObjectParameter("Gold", gold) :
                new ObjectParameter("Gold", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Api_A_Gold_UpdateForUser", userIDParameter, typeParameter, goldParameter);
        }
    
        public virtual int Out_LogExchangeCard_AddNew(Nullable<int> userId, Nullable<int> cardType, string cardName, Nullable<decimal> cardAmount, string iPAddress, Nullable<int> platformID, string hardwareID, Nullable<int> result, Nullable<bool> isApproval, ObjectParameter logId, Nullable<int> roundId, string description, Nullable<int> channelID)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var cardTypeParameter = cardType.HasValue ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(int));
    
            var cardNameParameter = cardName != null ?
                new ObjectParameter("CardName", cardName) :
                new ObjectParameter("CardName", typeof(string));
    
            var cardAmountParameter = cardAmount.HasValue ?
                new ObjectParameter("CardAmount", cardAmount) :
                new ObjectParameter("CardAmount", typeof(decimal));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var platformIDParameter = platformID.HasValue ?
                new ObjectParameter("PlatformID", platformID) :
                new ObjectParameter("PlatformID", typeof(int));
    
            var hardwareIDParameter = hardwareID != null ?
                new ObjectParameter("HardwareID", hardwareID) :
                new ObjectParameter("HardwareID", typeof(string));
    
            var resultParameter = result.HasValue ?
                new ObjectParameter("Result", result) :
                new ObjectParameter("Result", typeof(int));
    
            var isApprovalParameter = isApproval.HasValue ?
                new ObjectParameter("IsApproval", isApproval) :
                new ObjectParameter("IsApproval", typeof(bool));
    
            var roundIdParameter = roundId.HasValue ?
                new ObjectParameter("RoundId", roundId) :
                new ObjectParameter("RoundId", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_LogExchangeCard_AddNew", userIdParameter, cardTypeParameter, cardNameParameter, cardAmountParameter, iPAddressParameter, platformIDParameter, hardwareIDParameter, resultParameter, isApprovalParameter, logId, roundIdParameter, descriptionParameter, channelIDParameter);
        }
    
        public virtual int Out_LogExchangeCard_Update(Nullable<int> result, string serial, string pinCode, Nullable<int> partnerId, string partnerTransId, string partnerMessage, Nullable<bool> serviceResult, Nullable<int> logId, Nullable<decimal> goldTransfer, Nullable<int> channelID)
        {
            var resultParameter = result.HasValue ?
                new ObjectParameter("Result", result) :
                new ObjectParameter("Result", typeof(int));
    
            var serialParameter = serial != null ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(string));
    
            var pinCodeParameter = pinCode != null ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(string));
    
            var partnerIdParameter = partnerId.HasValue ?
                new ObjectParameter("PartnerId", partnerId) :
                new ObjectParameter("PartnerId", typeof(int));
    
            var partnerTransIdParameter = partnerTransId != null ?
                new ObjectParameter("PartnerTransId", partnerTransId) :
                new ObjectParameter("PartnerTransId", typeof(string));
    
            var partnerMessageParameter = partnerMessage != null ?
                new ObjectParameter("PartnerMessage", partnerMessage) :
                new ObjectParameter("PartnerMessage", typeof(string));
    
            var serviceResultParameter = serviceResult.HasValue ?
                new ObjectParameter("serviceResult", serviceResult) :
                new ObjectParameter("serviceResult", typeof(bool));
    
            var logIdParameter = logId.HasValue ?
                new ObjectParameter("LogId", logId) :
                new ObjectParameter("LogId", typeof(int));
    
            var goldTransferParameter = goldTransfer.HasValue ?
                new ObjectParameter("GoldTransfer", goldTransfer) :
                new ObjectParameter("GoldTransfer", typeof(decimal));
    
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_LogExchangeCard_Update", resultParameter, serialParameter, pinCodeParameter, partnerIdParameter, partnerTransIdParameter, partnerMessageParameter, serviceResultParameter, logIdParameter, goldTransferParameter, channelIDParameter);
        }
    
        public virtual ObjectResult<Ins_MyConfig_GetConfigByKey_Result> Ins_MyConfig_GetConfigByKey(string key)
        {
            var keyParameter = key != null ?
                new ObjectParameter("key", key) :
                new ObjectParameter("key", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Ins_MyConfig_GetConfigByKey_Result>("Ins_MyConfig_GetConfigByKey", keyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Out_LogCardTrans_Insert(Nullable<int> userID, string serial, string pinCard, Nullable<int> cardType, string iPAddress, Nullable<int> platformID, Nullable<int> result, Nullable<int> channelID, string versionGame)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var serialParameter = serial != null ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(string));
    
            var pinCardParameter = pinCard != null ?
                new ObjectParameter("PinCard", pinCard) :
                new ObjectParameter("PinCard", typeof(string));
    
            var cardTypeParameter = cardType.HasValue ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(int));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var platformIDParameter = platformID.HasValue ?
                new ObjectParameter("PlatformID", platformID) :
                new ObjectParameter("PlatformID", typeof(int));
    
            var resultParameter = result.HasValue ?
                new ObjectParameter("Result", result) :
                new ObjectParameter("Result", typeof(int));
    
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(int));
    
            var versionGameParameter = versionGame != null ?
                new ObjectParameter("VersionGame", versionGame) :
                new ObjectParameter("VersionGame", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Out_LogCardTrans_Insert", userIDParameter, serialParameter, pinCardParameter, cardTypeParameter, iPAddressParameter, platformIDParameter, resultParameter, channelIDParameter, versionGameParameter);
        }
    
        public virtual ObjectResult<Api_LogCreditTrans_InsertDepositInApp_Result> Api_LogCreditTrans_InsertDepositInApp(Nullable<int> userID, string transID, Nullable<decimal> currentCoin, Nullable<decimal> coinTrans, Nullable<int> status, string description, string token, Nullable<int> cardType, string cardTypeString, Nullable<decimal> cardAmount, Nullable<int> channelID, Nullable<int> platformId, string versionGame)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var transIDParameter = transID != null ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(string));
    
            var currentCoinParameter = currentCoin.HasValue ?
                new ObjectParameter("CurrentCoin", currentCoin) :
                new ObjectParameter("CurrentCoin", typeof(decimal));
    
            var coinTransParameter = coinTrans.HasValue ?
                new ObjectParameter("CoinTrans", coinTrans) :
                new ObjectParameter("CoinTrans", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var tokenParameter = token != null ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(string));
    
            var cardTypeParameter = cardType.HasValue ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(int));
    
            var cardTypeStringParameter = cardTypeString != null ?
                new ObjectParameter("CardTypeString", cardTypeString) :
                new ObjectParameter("CardTypeString", typeof(string));
    
            var cardAmountParameter = cardAmount.HasValue ?
                new ObjectParameter("CardAmount", cardAmount) :
                new ObjectParameter("CardAmount", typeof(decimal));
    
            var channelIDParameter = channelID.HasValue ?
                new ObjectParameter("ChannelID", channelID) :
                new ObjectParameter("ChannelID", typeof(int));
    
            var platformIdParameter = platformId.HasValue ?
                new ObjectParameter("PlatformId", platformId) :
                new ObjectParameter("PlatformId", typeof(int));
    
            var versionGameParameter = versionGame != null ?
                new ObjectParameter("VersionGame", versionGame) :
                new ObjectParameter("VersionGame", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Api_LogCreditTrans_InsertDepositInApp_Result>("Api_LogCreditTrans_InsertDepositInApp", userIDParameter, transIDParameter, currentCoinParameter, coinTransParameter, statusParameter, descriptionParameter, tokenParameter, cardTypeParameter, cardTypeStringParameter, cardAmountParameter, channelIDParameter, platformIdParameter, versionGameParameter);
        }
    
        public virtual ObjectResult<Out_FriendRelationship_GetTopLevelFriend_Result> Out_FriendRelationship_GetTopLevelFriend(Nullable<int> userID, Nullable<int> top, Nullable<int> position, Nullable<int> pageSize, ObjectParameter totalRow)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("Top", top) :
                new ObjectParameter("Top", typeof(int));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_FriendRelationship_GetTopLevelFriend_Result>("Out_FriendRelationship_GetTopLevelFriend", userIDParameter, topParameter, positionParameter, pageSizeParameter, totalRow);
        }
    
        public virtual ObjectResult<Out_FriendRelationship_GetTopRickFriend_Result> Out_FriendRelationship_GetTopRickFriend(Nullable<int> userID, Nullable<int> top, Nullable<int> position, Nullable<int> pageSize, ObjectParameter totalRow)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("Top", top) :
                new ObjectParameter("Top", typeof(int));
    
            var positionParameter = position.HasValue ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_FriendRelationship_GetTopRickFriend_Result>("Out_FriendRelationship_GetTopRickFriend", userIDParameter, topParameter, positionParameter, pageSizeParameter, totalRow);
        }
    
        public virtual ObjectResult<Out_ExchangeCard_GetHistory_Result> Out_ExchangeCard_GetHistory(Nullable<int> rowStart, Nullable<int> rowEnd, ObjectParameter totalRow)
        {
            var rowStartParameter = rowStart.HasValue ?
                new ObjectParameter("RowStart", rowStart) :
                new ObjectParameter("RowStart", typeof(int));
    
            var rowEndParameter = rowEnd.HasValue ?
                new ObjectParameter("RowEnd", rowEnd) :
                new ObjectParameter("RowEnd", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_ExchangeCard_GetHistory_Result>("Out_ExchangeCard_GetHistory", rowStartParameter, rowEndParameter, totalRow);
        }
    
        public virtual ObjectResult<Out_PaymentConfig_Channel_PaymentType_Result> Out_PaymentConfig_Channel_PaymentType(Nullable<int> channelId, Nullable<int> paymentType)
        {
            var channelIdParameter = channelId.HasValue ?
                new ObjectParameter("ChannelId", channelId) :
                new ObjectParameter("ChannelId", typeof(int));
    
            var paymentTypeParameter = paymentType.HasValue ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_PaymentConfig_Channel_PaymentType_Result>("Out_PaymentConfig_Channel_PaymentType", channelIdParameter, paymentTypeParameter);
        }
    
        public virtual ObjectResult<Out_ItemGame_ProcessOpenGiftBoxTypeCard_V3_Result> Out_ItemGame_ProcessOpenGiftBoxTypeCard_V3(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_ItemGame_ProcessOpenGiftBoxTypeCard_V3_Result>("Out_ItemGame_ProcessOpenGiftBoxTypeCard_V3", userIDParameter);
        }
    
        public virtual int Out_ItemGameUser_UpdateStatus(Nullable<int> itemGameUserId, Nullable<bool> status)
        {
            var itemGameUserIdParameter = itemGameUserId.HasValue ?
                new ObjectParameter("ItemGameUserId", itemGameUserId) :
                new ObjectParameter("ItemGameUserId", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_ItemGameUser_UpdateStatus", itemGameUserIdParameter, statusParameter);
        }
    
        public virtual ObjectResult<Out_ItemGame_ProcessOpenGiftBoxTypeCard_V4_Result> Out_ItemGame_ProcessOpenGiftBoxTypeCard_V4(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_ItemGame_ProcessOpenGiftBoxTypeCard_V4_Result>("Out_ItemGame_ProcessOpenGiftBoxTypeCard_V4", userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Out_LogCardOpenGiftBox_Update(Nullable<int> iD, string transId, Nullable<int> userID, string serial, string pincode, Nullable<int> result, string partnerMessage, Nullable<int> cardType, Nullable<int> cardAmount)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var transIdParameter = transId != null ?
                new ObjectParameter("TransId", transId) :
                new ObjectParameter("TransId", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var serialParameter = serial != null ?
                new ObjectParameter("Serial", serial) :
                new ObjectParameter("Serial", typeof(string));
    
            var pincodeParameter = pincode != null ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(string));
    
            var resultParameter = result.HasValue ?
                new ObjectParameter("Result", result) :
                new ObjectParameter("Result", typeof(int));
    
            var partnerMessageParameter = partnerMessage != null ?
                new ObjectParameter("PartnerMessage", partnerMessage) :
                new ObjectParameter("PartnerMessage", typeof(string));
    
            var cardTypeParameter = cardType.HasValue ?
                new ObjectParameter("CardType", cardType) :
                new ObjectParameter("CardType", typeof(int));
    
            var cardAmountParameter = cardAmount.HasValue ?
                new ObjectParameter("CardAmount", cardAmount) :
                new ObjectParameter("CardAmount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Out_LogCardOpenGiftBox_Update", iDParameter, transIdParameter, userIDParameter, serialParameter, pincodeParameter, resultParameter, partnerMessageParameter, cardTypeParameter, cardAmountParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Ins_CardStock_LogExport_Add(Nullable<int> minValue, Nullable<int> maxValue, Nullable<int> quantity, string description, string message, Nullable<int> status, Nullable<int> userId, Nullable<int> adminId, string clientTarget, string clientIp, string clientAgent, Nullable<int> reasonId, string reasonName, ObjectParameter cardSerial, ObjectParameter cardPin, ObjectParameter cardType)
        {
            var minValueParameter = minValue.HasValue ?
                new ObjectParameter("MinValue", minValue) :
                new ObjectParameter("MinValue", typeof(int));
    
            var maxValueParameter = maxValue.HasValue ?
                new ObjectParameter("MaxValue", maxValue) :
                new ObjectParameter("MaxValue", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("AdminId", adminId) :
                new ObjectParameter("AdminId", typeof(int));
    
            var clientTargetParameter = clientTarget != null ?
                new ObjectParameter("ClientTarget", clientTarget) :
                new ObjectParameter("ClientTarget", typeof(string));
    
            var clientIpParameter = clientIp != null ?
                new ObjectParameter("ClientIp", clientIp) :
                new ObjectParameter("ClientIp", typeof(string));
    
            var clientAgentParameter = clientAgent != null ?
                new ObjectParameter("ClientAgent", clientAgent) :
                new ObjectParameter("ClientAgent", typeof(string));
    
            var reasonIdParameter = reasonId.HasValue ?
                new ObjectParameter("ReasonId", reasonId) :
                new ObjectParameter("ReasonId", typeof(int));
    
            var reasonNameParameter = reasonName != null ?
                new ObjectParameter("ReasonName", reasonName) :
                new ObjectParameter("ReasonName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Ins_CardStock_LogExport_Add", minValueParameter, maxValueParameter, quantityParameter, descriptionParameter, messageParameter, statusParameter, userIdParameter, adminIdParameter, clientTargetParameter, clientIpParameter, clientAgentParameter, reasonIdParameter, reasonNameParameter, cardSerial, cardPin, cardType);
        }
    }
}
