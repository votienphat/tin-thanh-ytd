//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess.EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using EntitiesObject.Entities.LogManagementEntities;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LogManagementEntities : DbContext
    {
        public LogManagementEntities()
            : base("name=LogManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<LoginLog> LoginLogs { get; set; }
        public virtual DbSet<RegisterLog> RegisterLogs { get; set; }
        public virtual DbSet<CoinLog> CoinLogs { get; set; }
        public virtual DbSet<PaymentLog> PaymentLogs { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<NotificationPermission> NotificationPermissions { get; set; }
        public virtual DbSet<NotificationReason> NotificationReasons { get; set; }
        public virtual DbSet<LevelGameLog> LevelGameLogs { get; set; }
        public virtual DbSet<RichGameLog> RichGameLogs { get; set; }
    
        public virtual int Out_ExchangeCard_LogManagement_AddNew(Nullable<int> userID, Nullable<int> exchangeType, Nullable<int> platformID, string iMEI, Nullable<int> hardwareID, string iPAddress, Nullable<int> status, string transId)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var exchangeTypeParameter = exchangeType.HasValue ?
                new ObjectParameter("ExchangeType", exchangeType) :
                new ObjectParameter("ExchangeType", typeof(int));
    
            var platformIDParameter = platformID.HasValue ?
                new ObjectParameter("PlatformID", platformID) :
                new ObjectParameter("PlatformID", typeof(int));
    
            var iMEIParameter = iMEI != null ?
                new ObjectParameter("IMEI", iMEI) :
                new ObjectParameter("IMEI", typeof(string));
    
            var hardwareIDParameter = hardwareID.HasValue ?
                new ObjectParameter("HardwareID", hardwareID) :
                new ObjectParameter("HardwareID", typeof(int));
    
            var iPAddressParameter = iPAddress != null ?
                new ObjectParameter("IPAddress", iPAddress) :
                new ObjectParameter("IPAddress", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var transIdParameter = transId != null ?
                new ObjectParameter("TransId", transId) :
                new ObjectParameter("TransId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_ExchangeCard_LogManagement_AddNew", userIDParameter, exchangeTypeParameter, platformIDParameter, iMEIParameter, hardwareIDParameter, iPAddressParameter, statusParameter, transIdParameter);
        }
    
        public virtual int Out_ExchangeCard_LogManagement_Update(Nullable<int> userID, Nullable<int> status, string transID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var transIDParameter = transID != null ?
                new ObjectParameter("TransID", transID) :
                new ObjectParameter("TransID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_ExchangeCard_LogManagement_Update", userIDParameter, statusParameter, transIDParameter);
        }
    
        public virtual ObjectResult<Out_LoginLog_GetForSign_Result> Out_LoginLog_GetForSign(string hardwareID, Nullable<int> userID, string appVersion)
        {
            var hardwareIDParameter = hardwareID != null ?
                new ObjectParameter("HardwareID", hardwareID) :
                new ObjectParameter("HardwareID", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var appVersionParameter = appVersion != null ?
                new ObjectParameter("AppVersion", appVersion) :
                new ObjectParameter("AppVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_LoginLog_GetForSign_Result>("Out_LoginLog_GetForSign", hardwareIDParameter, userIDParameter, appVersionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Out_PaymentLog_InsertData(Nullable<int> userId, Nullable<int> paymentType, Nullable<int> platformID, string imei, string hardwareId, string ipAddress, Nullable<int> status, Nullable<int> objId, Nullable<decimal> amount, Nullable<int> itemType)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var paymentTypeParameter = paymentType.HasValue ?
                new ObjectParameter("paymentType", paymentType) :
                new ObjectParameter("paymentType", typeof(int));
    
            var platformIDParameter = platformID.HasValue ?
                new ObjectParameter("PlatformID", platformID) :
                new ObjectParameter("PlatformID", typeof(int));
    
            var imeiParameter = imei != null ?
                new ObjectParameter("imei", imei) :
                new ObjectParameter("imei", typeof(string));
    
            var hardwareIdParameter = hardwareId != null ?
                new ObjectParameter("hardwareId", hardwareId) :
                new ObjectParameter("hardwareId", typeof(string));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("ipAddress", ipAddress) :
                new ObjectParameter("ipAddress", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            var objIdParameter = objId.HasValue ?
                new ObjectParameter("objId", objId) :
                new ObjectParameter("objId", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var itemTypeParameter = itemType.HasValue ?
                new ObjectParameter("itemType", itemType) :
                new ObjectParameter("itemType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Out_PaymentLog_InsertData", userIdParameter, paymentTypeParameter, platformIDParameter, imeiParameter, hardwareIdParameter, ipAddressParameter, statusParameter, objIdParameter, amountParameter, itemTypeParameter);
        }
    
        public virtual int Out_PaymentLog_UpdateData(Nullable<int> id, Nullable<int> status)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Out_PaymentLog_UpdateData", idParameter, statusParameter);
        }
    
        public virtual ObjectResult<Out_PaymentLog_GetHistoryPagingByUserId_Result> Out_PaymentLog_GetHistoryPagingByUserId(Nullable<int> userId, Nullable<int> rowStart, Nullable<int> rowEnd, ObjectParameter totalRow)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var rowStartParameter = rowStart.HasValue ?
                new ObjectParameter("RowStart", rowStart) :
                new ObjectParameter("RowStart", typeof(int));
    
            var rowEndParameter = rowEnd.HasValue ?
                new ObjectParameter("RowEnd", rowEnd) :
                new ObjectParameter("RowEnd", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_PaymentLog_GetHistoryPagingByUserId_Result>("Out_PaymentLog_GetHistoryPagingByUserId", userIdParameter, rowStartParameter, rowEndParameter, totalRow);
        }
    
        public virtual int Ins_Notification_GetNotificationByTime(Nullable<System.DateTime> fromTime, Nullable<System.DateTime> toTime)
        {
            var fromTimeParameter = fromTime.HasValue ?
                new ObjectParameter("FromTime", fromTime) :
                new ObjectParameter("FromTime", typeof(System.DateTime));
    
            var toTimeParameter = toTime.HasValue ?
                new ObjectParameter("ToTime", toTime) :
                new ObjectParameter("ToTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Ins_Notification_GetNotificationByTime", fromTimeParameter, toTimeParameter);
        }
    
        public virtual ObjectResult<Ins_NotificationReason_GetNotificationReasonByAdminID_Result> Ins_NotificationReason_GetNotificationReasonByAdminID(Nullable<int> adminID)
        {
            var adminIDParameter = adminID.HasValue ?
                new ObjectParameter("AdminID", adminID) :
                new ObjectParameter("AdminID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Ins_NotificationReason_GetNotificationReasonByAdminID_Result>("Ins_NotificationReason_GetNotificationReasonByAdminID", adminIDParameter);
        }
    
        public virtual ObjectResult<Out_TopKillBoss_GetTop_Result> Out_TopKillBoss_GetTop(Nullable<int> top)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_TopKillBoss_GetTop_Result>("Out_TopKillBoss_GetTop", topParameter);
        }
    
        public virtual ObjectResult<Out_RichGameLog_GetData_Result> Out_RichGameLog_GetData(Nullable<int> top, Nullable<int> userId)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_RichGameLog_GetData_Result>("Out_RichGameLog_GetData", topParameter, userIdParameter);
        }
    
        public virtual ObjectResult<Out_LevelGameLog_GetLevelGame_Result> Out_LevelGameLog_GetLevelGame(Nullable<int> top, Nullable<int> userId)
        {
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Out_LevelGameLog_GetLevelGame_Result>("Out_LevelGameLog_GetLevelGame", topParameter, userIdParameter);
        }
    
        public virtual int Ins_Notification_AddNotification(Nullable<int> notificationReasonID, string link, string description, Nullable<System.DateTime> date)
        {
            var notificationReasonIDParameter = notificationReasonID.HasValue ?
                new ObjectParameter("NotificationReasonID", notificationReasonID) :
                new ObjectParameter("NotificationReasonID", typeof(int));
    
            var linkParameter = link != null ?
                new ObjectParameter("Link", link) :
                new ObjectParameter("Link", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Ins_Notification_AddNotification", notificationReasonIDParameter, linkParameter, descriptionParameter, dateParameter);
        }
    
        public virtual ObjectResult<Ins_NotificationReason_GetNotificationReasonByID_Result> Ins_NotificationReason_GetNotificationReasonByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Ins_NotificationReason_GetNotificationReasonByID_Result>("Ins_NotificationReason_GetNotificationReasonByID", iDParameter);
        }
    }
}
